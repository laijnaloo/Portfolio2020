{"version":3,"sources":["assets/Einride.jpg","assets/nn.png","assets/Plants.png","views/listOfProjects.tsx","views/projects.tsx","serviceWorker.ts","index.tsx","views/startpage.tsx"],"names":["module","exports","ListOfProjects","image","require","title","subTitle","description","frameworks","websiteLink","Projects","map","project","className","strength","bgImage","framework","icon","faCheck","href","Boolean","window","location","hostname","match","ReactDOM","render","myRef","useRef","useState","setSideContentIsVisible","useEffect","myScrollFunc","scrollY","innerHeight","addEventListener","removeEventListener","activeClass","to","spy","smooth","offset","duration","id","onClick","scrollTo","current","offsetTop","ref","faLinkedin","size","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,0ICW9BC,EAA6B,CACxC,CACEC,MAAOC,EAAQ,IACfC,MAAO,UACPC,SAAU,qBACVC,YACE,kYACFC,WAAY,CAAC,QAAS,SAAU,UAAW,YAAa,UACxDC,YAAa,6BAEf,CACEN,MAAOC,EAAQ,IACfC,MAAO,kBACPC,SAAU,mCACVC,YACE,wdACFC,WAAY,CAAC,SAAU,aAAc,OAAQ,UAAW,UACxDC,YAAa,6BAEf,CACEN,MAAOC,EAAQ,IACfC,MAAO,SACPC,SAAU,cACVC,YACE,6RACFC,WAAY,CAAC,SAAU,YACvBC,YAAa,kDC1BV,SAASC,IACd,OACE,oCACGR,EAAeS,KAAI,SAAAC,GAClB,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,qBACb,kBAAC,WAAD,CAAUC,SAAU,IAAKC,QAASH,EAAQT,SAG5C,yBAAKU,UAAU,oBACb,yBAAKA,UAAU,sBACb,4BAAKD,EAAQP,OACb,4BAAKO,EAAQN,UACb,2BAAIM,EAAQL,cAGd,yBAAKM,UAAU,iDACZD,EAAQJ,WAAWG,KAAI,SAAAK,GACtB,OACE,yBAAKH,UAAU,qBACb,kBAAC,IAAD,CAAiBI,KAAMC,MACvB,+BAAKF,QAKb,yBAAKH,UAAU,iDACZD,EAAQH,aACP,uBAAGU,KAAMP,EAAQH,aACf,yDC7BAW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBCIK,WACL,IAAMC,EAAQC,iBAAuB,MADX,EAI8BC,oBAAS,GAJvC,mBAIGC,GAJH,WAe1B,OATAC,qBAAU,WACR,SAASC,IACPF,EAAwBT,OAAOY,QAAUZ,OAAOa,YAAc,GAIhE,OADAb,OAAOc,iBAAiB,SAAUH,GAC3B,kBAAMX,OAAOe,oBAAoB,SAAUJ,MACjD,IAGD,oCACE,kBAAC,OAAD,CACEK,YAAY,SACZC,GAAG,WACHC,KAAK,EACLC,QAAQ,EACRC,OAAQ,EACRC,SAAU,KAEV,yBAAK7B,UAAU,aAAa8B,GAAG,cAC7B,yBAAK9B,UAAU,aACb,8CACA,mEAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QAAQ+B,QA7BjB,kBAAMvB,OAAOwB,SAAS,EAAGlB,EAAMmB,QAASC,iBAkCpD,yBAAKlC,UAAU,WAAWmC,IAAKrB,EAAOgB,GAAG,YACvC,kBAACjC,EAAD,OAGF,yBAAKG,UAAU,UACb,uBAAGM,KAAK,wDACN,kBAAC,IAAD,CAAiBF,KAAMgC,IAAmBC,KAAM,YD9CxD,MAEAC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d4cfeea2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Einride.05ee28b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nn.afc51a05.png\";","module.exports = __webpack_public_path__ + \"static/media/Plants.90a4d9ca.png\";","interface IProject {\n  image: string;\n  title: string;\n  subTitle: string;\n  description: string;\n  frameworks: string[];\n  websiteLink?: string;\n  github?: string;\n  invision?: string;\n}\n\nexport const ListOfProjects: IProject[] = [\n  {\n    image: require(\"../assets/Einride.jpg\"),\n    title: \"Einride\",\n    subTitle: \"Frontend Developer\",\n    description:\n      \"Making transportaion more intelligent, safe, cost-effective and sustainable is a few of the things that the startup Einride strives towards. To achieve this feat they have developed their own autonomous, all-electrict transport vehicles called Pods. I was part of the team that helped to develop Einrides website, mainly as a Front end developer but I also contributet with UX-design\",\n    frameworks: [\"React\", \"Gatsby\", \"GraphQL\", \"Wordpress\", \"Sketch\"],\n    websiteLink: \"https://www.einride.tech/\"\n  },\n  {\n    image: require(\"../assets/nn.png\"),\n    title: \"On Good Grounds\",\n    subTitle: \"Frontend Developer & UX-designer\",\n    description:\n      \"The student association Norrlands nation needed to raise money for their upcoming renovation of their building and needed a website to share information regarding the project. The projekt was named 'PÃ¥ goda grunder' (On Good Grounds) and besides informing about the renovation it is also possible for people to send donations to the project. Designed the website using Photoshop and InVision and later on built the website using Preact, Typescript, Sass and Prismic.\",\n    frameworks: [\"Preact\", \"TypeScript\", \"Sass\", \"Prismic\", \"Sketch\"],\n    websiteLink: \"https://pagodagrunder.se/\"\n  },\n  {\n    image: require(\"../assets/Plants.png\"),\n    title: \"Plants\",\n    subTitle: \"UX-designer\",\n    description:\n      \"During a course in UX-design I developed an application for plant lovers. Information regarding the users needs was gathered through interviews with potential users and the result was analysed and made into a prototype. The design was iterated and improved by conducting user tests.\",\n    frameworks: [\"Sketch\", \"InVision\"],\n    websiteLink: \"https://invis.io/2JW0F5WB7TR#/405313816_Start\"\n  }\n];\n","import React, { useRef, useEffect, useState } from \"react\";\nimport \"./projects.scss\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faReact } from \"@fortawesome/free-brands-svg-icons\";\nimport { Parallax, Background } from \"react-parallax\";\nimport { ListOfProjects } from \"./listOfProjects\";\n\nimport storytime from \"../assets/storytime.png\";\n\nexport function Projects() {\n  return (\n    <>\n      {ListOfProjects.map(project => {\n        return (\n          <div className=\"projectMain\">\n            <div className=\"parallaxContainer\">\n              <Parallax strength={300} bgImage={project.image}></Parallax>\n            </div>\n\n            <div className=\"projectContainer\">\n              <div className=\"projectDescription\">\n                <h2>{project.title}</h2>\n                <h6>{project.subTitle}</h6>\n                <p>{project.description}</p>\n              </div>\n\n              <div className=\"projectDescription projectTechniquesContainer\">\n                {project.frameworks.map(framework => {\n                  return (\n                    <div className=\"projectTechniques\">\n                      <FontAwesomeIcon icon={faCheck} />\n                      <p> {framework}</p>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"projectDescription projectTechniquesContainer\">\n                {project.websiteLink && (\n                  <a href={project.websiteLink}>\n                    <button>Go to Website</button>\n                  </a>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { StartPage } from \"./views/startpage\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StartPage />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useRef, useEffect, useState } from \"react\";\nimport \"./projects.scss\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { Parallax, Background } from \"react-parallax\";\nimport { Projects } from \"./projects\";\nimport { ListOfProjects } from \"./listOfProjects\";\n\nimport storytime from \"../assets/storytime.png\";\n\nexport function StartPage() {\n  const myRef = useRef<HTMLDivElement>(null);\n  const onClick = () => window.scrollTo(0, myRef.current!.offsetTop);\n\n  const [sideContentIsVisible, setSideContentIsVisible] = useState(false);\n\n  useEffect(() => {\n    function myScrollFunc() {\n      setSideContentIsVisible(window.scrollY > window.innerHeight / 2);\n    }\n\n    window.addEventListener(\"scroll\", myScrollFunc);\n    return () => window.removeEventListener(\"scroll\", myScrollFunc);\n  }, []);\n\n  return (\n    <>\n      <Link\n        activeClass=\"active\"\n        to=\"projects\"\n        spy={true}\n        smooth={true}\n        offset={0}\n        duration={500}\n      >\n        <div className=\"startImage\" id=\"startImage\">\n          <div className=\"startText\">\n            <h1>Lina Andersson</h1>\n            <h4>Frontend Developer and UX Designer</h4>\n          </div>\n          <div className=\"downArrow\">\n            <div className=\"arrow\" onClick={onClick}></div>\n          </div>\n        </div>\n      </Link>\n\n      <div className=\"projects\" ref={myRef} id=\"projects\">\n        <Projects />\n      </div>\n\n      <div className=\"footer\">\n        <a href=\"https://www.linkedin.com/in/lina-andersson-52348898/\">\n          <FontAwesomeIcon icon={faLinkedin as any} size={\"2x\"} />\n        </a>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}